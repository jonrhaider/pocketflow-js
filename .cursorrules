---
layout: default
title: "Agentic Coding"
---

# Agentic Coding: Humans Design, Agents code! (JavaScript Edition)

> If you are an AI agent involved in building LLM Systems with **JavaScript/Node.js**, read this guide **VERY, VERY** carefully! This is the most important chapter in the entire document. Throughout development, you should always (1) start with a small and simple solution, (2) design at a high level (`docs/design.md`) before implementation, and (3) frequently ask humans for feedback and clarification.
{: .warning }

## Agentic Coding Steps

Agentic Coding should be a collaboration between Human System Design and Agent Implementation:

| Steps                  | Human      | AI        | Comment                                                                 |
|:-----------------------|:----------:|:---------:|:------------------------------------------------------------------------|
| 1. Requirements | ★★★ High  | ★☆☆ Low   | Humans understand the requirements and context.                    |
| 2. Flow          | ★★☆ Medium | ★★☆ Medium |  Humans specify the high-level design, and the AI fills in the details. |
| 3. Utilities   | ★★☆ Medium | ★★☆ Medium | Humans provide available external APIs and integrations, and the AI helps with implementation. |
| 4. Data          | ★☆☆ Low    | ★★★ High   | AI designs the data schema, and humans verify.                            |
| 5. Node          | ★☆☆ Low   | ★★★ High  | The AI helps design the node based on the flow.          |
| 6. Implementation      | ★☆☆ Low   | ★★★ High  |  The AI implements the flow based on the design. |
| 7. Optimization        | ★★☆ Medium | ★★☆ Medium | Humans evaluate the results, and the AI helps optimize. |
| 8. Reliability         | ★☆☆ Low   | ★★★ High  |  The AI writes test cases and addresses corner cases.     |

1. **Requirements**: Clarify the requirements for your project, and evaluate whether an AI system is a good fit. 
    - Understand AI systems' strengths and limitations:
      - **Good for**: Routine tasks requiring common sense (filling forms, replying to emails)
      - **Good for**: Creative tasks with well-defined inputs (building slides, writing SQL)
      - **Not good for**: Ambiguous problems requiring complex decision-making (business strategy, startup planning)
    - **Keep It User-Centric:** Explain the "problem" from the user's perspective rather than just listing features.
    - **Balance complexity vs. impact**: Aim to deliver the highest value features with minimal complexity early.

2. **Flow Design**: Outline at a high level, describe how your AI system orchestrates nodes.
    - Identify applicable design patterns (e.g., [Map Reduce](./design_pattern/mapreduce.md), [Agent](./design_pattern/agent.md), [RAG](./design_pattern/rag.md)).
      - For each node in the flow, start with a high-level one-line description of what it does.
      - If using **Map Reduce**, specify how to map (what to split) and how to reduce (how to combine).
      - If using **Agent**, specify what are the inputs (context) and what are the possible actions.
      - If using **RAG**, specify what to embed, noting that there's usually both offline (indexing) and online (retrieval) workflows.
    - Outline the flow and draw it in a mermaid diagram. For example:
      ```mermaid
      flowchart LR
          start[Start] --> batch[Batch]
          batch --> check[Check]
          check -->|OK| process
          check -->|Error| fix[Fix]
          fix --> check
          
          subgraph process[Process]
            step1[Step 1] --> step2[Step 2]
          end
          
          process --> endNode[End]
      ```
    - > **If Humans can't specify the flow, AI Agents can't automate it!** Before building an LLM system, thoroughly understand the problem and potential solution by manually solving example inputs to develop intuition.  
      {: .best-practice }

3. **Utilities**: Based on the Flow Design, identify and implement necessary utility functions.
    - Think of your AI system as the brain. It needs a body—these *external utility functions*—to interact with the real world:
        <div align="center"><img src="https://github.com/the-pocket/.github/raw/main/assets/utility.png?raw=true" width="400"/></div>

        - Reading inputs (e.g., retrieving Slack messages, reading emails)
        - Writing outputs (e.g., generating reports, sending emails)
        - Using external tools (e.g., calling LLMs, searching the web)
        - **NOTE**: *LLM-based tasks* (e.g., summarizing text, analyzing sentiment) are **NOT** utility functions; rather, they are *core functions* internal in the AI system.
    - For each utility function, implement it and write a simple test.
    - Document their input/output, as well as why they are necessary. For example:
      - `name`: `getEmbedding` (`utils/get_embedding.js`)
      - `input`: `str`
      - `output`: a vector of 3072 floats
      - `necessity`: Used by the second node to embed text
    - Example utility implementation:
      ```javascript
      // utils/call_llm.js
      const { OpenAI } = require('openai');

      async function callLLM(prompt) {
          const client = new OpenAI({
              apiKey: process.env.OPENAI_API_KEY || "YOUR_API_KEY_HERE"
          });
          
          const response = await client.chat.completions.create({
              model: "gpt-4o",
              messages: [{ role: "user", content: prompt }]
          });
          
          return response.choices[0].message.content;
      }

      // Test the function
      if (require.main === module) {
          (async () => {
              const prompt = "What is the meaning of life?";
              console.log(await callLLM(prompt));
          })();
      }

      module.exports = { callLLM };
      ```
    - > **Sometimes, design Utilities before Flow:**  For example, for an LLM project to automate a legacy system, the bottleneck will likely be the available interface to that system. Start by designing the hardest utilities for interfacing, and then build the flow around them.
      {: .best-practice }
    - > **Avoid Exception Handling in Utilities**: If a utility function is called from a Node's `exec()` method, avoid using `try...catch` blocks within the utility. Let the Node's built-in retry mechanism handle failures.
      {: .warning }

4. **Data Design**: Design the shared store that nodes will use to communicate.
   - One core design principle for PocketFlow is to use a well-designed [shared store](./core_abstraction/communication.md)—a data contract that all nodes agree upon to retrieve and store data.
      - For simple systems, use an in-memory dictionary.
      - For more complex systems or when persistence is required, use a database.
      - **Don't Repeat Yourself**: Use in-memory references or foreign keys.
      - Example shared store design:
        ```javascript
        const shared = {
            user: {
                id: "user123",
                context: {                // Another nested object
                    weather: { temp: 72, condition: "sunny" },
                    location: "San Francisco"
                }
            },
            results: {}                   // Empty object to store outputs
        };
        ```

5. **Node Design**: Plan how each node will read and write data, and use utility functions.
   - For each [Node](./core_abstraction/node.md), describe its type, how it reads and writes data, and which utility function it uses. Keep it specific but high-level without codes. For example:
     - `type`: Regular (or Batch, or Async)
     - `prep`: Read "text" from the shared store
     - `exec`: Call the embedding utility function. **Avoid exception handling here**; let the Node's retry mechanism manage failures.
     - `post`: Write "embedding" to the shared store

6. **Implementation**: Implement the initial nodes and flows based on the design.
   - 🎉 If you've reached this step, humans have finished the design. Now *Agentic Coding* begins!
   - **"Keep it simple, stupid!"** Avoid complex features and full-scale type checking.
   - **FAIL FAST**! Leverage the built-in [Node](./core_abstraction/node.md) retry and fallback mechanisms to handle failures gracefully. This helps you quickly identify weak points in the system.
   - Add logging throughout the code to facilitate debugging.

7. **Optimization**:
   - **Use Intuition**: For a quick initial evaluation, human intuition is often a good start.
   - **Redesign Flow (Back to Step 3)**: Consider breaking down tasks further, introducing agentic decisions, or better managing input contexts.
   - If your flow design is already solid, move on to micro-optimizations:
     - **Prompt Engineering**: Use clear, specific instructions with examples to reduce ambiguity.
     - **In-Context Learning**: Provide robust examples for tasks that are difficult to specify with instructions alone.

   - > **You'll likely iterate a lot!** Expect to repeat Steps 3–6 hundreds of times.
     >
     > <div align="center"><img src="https://github.com/the-pocket/.github/raw/main/assets/success.png?raw=true" width="400"/></div>
     {: .best-practice }

8. **Reliability**  
   - **Node Retries**: Add checks in the node `exec` to ensure outputs meet requirements, and consider increasing `max_retries` and `wait` times.
   - **Logging and Visualization**: Maintain logs of all attempts and visualize node results for easier debugging.
   - **Self-Evaluation**: Add a separate node (powered by an LLM) to review outputs when results are uncertain.

## Example LLM Project File Structure

```
my_project/
├── main.js
├── nodes.js
├── flow.js
├── utils/
│   ├── call_llm.js
│   └── search_web.js
├── package.json
└── docs/
    └── design.md
```

- **`package.json`**: Lists the JavaScript dependencies for the project.
  ```json
  {
    "name": "my-pocketflow-project",
    "version": "1.0.0",
    "dependencies": {
      "axios": "^1.6.0",
      "openai": "^4.0.0"
    }
  }
  ```

- **`docs/design.md`**: Contains project documentation for each step above. This should be *high-level* and *no-code*.
  ~~~
  # Design Doc: Your Project Name

  > Please DON'T remove notes for AI

  ## Requirements

  > Notes for AI: Keep it simple and clear.
  > If the requirements are abstract, write concrete user stories


  ## Flow Design

  > Notes for AI:
  > 1. Consider the design patterns of agent, map-reduce, rag, and workflow. Apply them if they fit.
  > 2. Present a concise, high-level description of the workflow.

  ### Applicable Design Pattern:

  1. Map the file summary into chunks, then reduce these chunks into a final summary.
  2. Agentic file finder
    - *Context*: The entire summary of the file
    - *Action*: Find the file

  ### Flow high-level Design:

  1. **First Node**: This node is for ...
  2. **Second Node**: This node is for ...
  3. **Third Node**: This node is for ...

  ```mermaid
  flowchart TD
      firstNode[First Node] --> secondNode[Second Node]
      secondNode --> thirdNode[Third Node]
  ```
  ## Utility Functions

  > Notes for AI:
  > 1. Understand the utility function definition thoroughly by reviewing the doc.
  > 2. Include only the necessary utility functions, based on nodes in the flow.

  1. **Call LLM** (`utils/call_llm.js`)
    - *Input*: prompt (string)
    - *Output*: response (string)
    - Generally used by most nodes for LLM tasks

  2. **Embedding** (`utils/get_embedding.js`)
    - *Input*: str
    - *Output*: a vector of 3072 floats
    - Used by the second node to embed text

  ## Node Design

  ### Shared Store

  > Notes for AI: Try to minimize data redundancy

  The shared store structure is organized as follows:

  ```javascript
  const shared = {
      key: "value"
  };
  ```

  ### Node Steps

  > Notes for AI: Carefully decide whether to use Batch/Async Node/Flow.

  1. First Node
    - *Purpose*: Provide a short explanation of the node’s function
    - *Type*: Decide between Regular, Batch, or Async
    - *Steps*:
      - *prep*: Read "key" from the shared store
      - *exec*: Call the utility function
      - *post*: Write "key" to the shared store

  2. Second Node
    ...
  ~~~


- **`utils/`**: Contains all utility functions.
  - It's recommended to dedicate one JavaScript file to each API call, for example `call_llm.js` or `search_web.js`.
  - Each file should also include a test section to try that API call
  ```javascript
  const { GoogleGenerativeAI } = require('@google/generative-ai');

  async function callLLM(prompt) {
      const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "");
      const model = genAI.getGenerativeModel({ 
          model: process.env.GEMINI_MODEL || "gemini-2.5-flash" 
      });
      
      const result = await model.generateContent(prompt);
      return result.response.text();
  }

  // Test the function
  if (require.main === module) {
      (async () => {
          const testPrompt = "Hello, how are you?";
          console.log("Making call...");
          const response = await callLLM(testPrompt);
          console.log(`Response: ${response}`);
      })();
  }

  module.exports = { callLLM };
  ```

- **`nodes.js`**: Contains all the node definitions.
  ```javascript
  // nodes.js
  const { Node } = require('./index.js'); // Import from your PocketFlow file
  const { callLLM } = require('./utils/call_llm');

  class GetQuestionNode extends Node {
      async exec(_) {
          // Get question directly from user input
          const readline = require('readline');
          const rl = readline.createInterface({
              input: process.stdin,
              output: process.stdout
          });
          
          return new Promise((resolve) => {
              rl.question('Enter your question: ', (answer) => {
                  rl.close();
                  resolve(answer);
              });
          });
      }
      
      async post(shared, prepRes, execRes) {
          // Store the user's question
          shared.question = execRes;
          return "default";  // Go to the next node
      }
  }

  class AnswerNode extends Node {
      prep(shared) {
          // Read question from shared
          return shared.question;
      }
      
      async exec(question) {
          // Call LLM to get the answer
          return await callLLM(question);
      }
      
      post(shared, prepRes, execRes) {
          // Store the answer in shared
          shared.answer = execRes;
      }
  }

  module.exports = { GetQuestionNode, AnswerNode };
  ```
- **`flow.js`**: Implements functions that create flows by importing node definitions and connecting them.
  ```javascript
  // flow.js
  const { Flow } = require('./index.js'); // Import from your PocketFlow file
  const { GetQuestionNode, AnswerNode } = require('./nodes');

  function createQAFlow() {
      // Create nodes
      const getQuestionNode = new GetQuestionNode();
      const answerNode = new AnswerNode();
      
      // Connect nodes in sequence using rshift method
      getQuestionNode.rshift(answerNode);
      
      // Create flow starting with input node
      return new Flow(getQuestionNode);
  }

  module.exports = { createQAFlow };
  ```
- **`main.js`**: Serves as the project's entry point.
  ```javascript
  // main.js
  const { createQAFlow } = require('./flow');

  // Example main function
  // Please replace this with your own main function
  async function main() {
      const shared = {
          question: null,  // Will be populated by GetQuestionNode from user input
          answer: null    // Will be populated by AnswerNode
      };

      // Create the flow and run it
      const qaFlow = createQAFlow();
      await qaFlow.run(shared);
      console.log(`Question: ${shared.question}`);
      console.log(`Answer: ${shared.answer}`);
  }

  // Run the main function
  if (require.main === module) {
      main().catch(console.error);
  }
  ```

================================================
File: docs/index.md
================================================
---
layout: default
title: "Home"
nav_order: 1
---

# Pocket Flow

A [100-line](https://github.com/the-pocket/PocketFlow/blob/main/pocketflow/__init__.py) minimalist LLM framework for *Agents, Task Decomposition, RAG, etc* (JavaScript Edition).

- **Lightweight**: Just the core graph abstraction in 100 lines. ZERO dependencies, and vendor lock-in.
- **Expressive**: Everything you love from larger frameworks—([Multi-](./design_pattern/multi_agent.md))[Agents](./design_pattern/agent.md), [Workflow](./design_pattern/workflow.md), [RAG](./design_pattern/rag.md), and more.  
- **Agentic-Coding**: Intuitive enough for AI agents to help humans build complex LLM applications.

<div align="center">
  <img src="https://github.com/the-pocket/.github/raw/main/assets/meme.jpg?raw=true" width="400"/>
</div>

## Core Abstraction

We model the LLM workflow as a **Graph + Shared Store**:

- [Node](./core_abstraction/node.md) handles simple (LLM) tasks.
- [Flow](./core_abstraction/flow.md) connects nodes through **Actions** (labeled edges).
- [Shared Store](./core_abstraction/communication.md) enables communication between nodes within flows.
- [Batch](./core_abstraction/batch.md) nodes/flows allow for data-intensive tasks.
- [Async](./core_abstraction/async.md) nodes/flows allow waiting for asynchronous tasks.
- [(Advanced) Parallel](./core_abstraction/parallel.md) nodes/flows handle I/O-bound tasks.

<div align="center">
  <img src="https://github.com/the-pocket/.github/raw/main/assets/abstraction.png" width="500"/>
</div>

## Design Pattern

From there, it’s easy to implement popular design patterns:

- [Agent](./design_pattern/agent.md) autonomously makes decisions.
- [Workflow](./design_pattern/workflow.md) chains multiple tasks into pipelines.
- [RAG](./design_pattern/rag.md) integrates data retrieval with generation.
- [Map Reduce](./design_pattern/mapreduce.md) splits data tasks into Map and Reduce steps.
- [Structured Output](./design_pattern/structure.md) formats outputs consistently.
- [(Advanced) Multi-Agents](./design_pattern/multi_agent.md) coordinate multiple agents.

<div align="center">
  <img src="https://github.com/the-pocket/.github/raw/main/assets/design.png" width="500"/>
</div>

## Utility Function

We **do not** provide built-in utilities. Instead, we offer *examples*—please *implement your own*:

- [LLM Wrapper](./utility_function/llm.md)
- [Viz and Debug](./utility_function/viz.md)
- [Web Search](./utility_function/websearch.md)
- [Chunking](./utility_function/chunking.md)
- [Embedding](./utility_function/embedding.md)
- [Vector Databases](./utility_function/vector.md)
- [Text-to-Speech](./utility_function/text_to_speech.md)

**Why not built-in?**: I believe it's a *bad practice* for vendor-specific APIs in a general framework:
- *API Volatility*: Frequent changes lead to heavy maintenance for hardcoded APIs.
- *Flexibility*: You may want to switch vendors, use fine-tuned models, or run them locally.
- *Optimizations*: Prompt caching, batching, and streaming are easier without vendor lock-in.

## Ready to build your Apps? 

Check out [Agentic Coding Guidance](./guide.md), the fastest way to develop LLM projects with Pocket Flow!

================================================
File: docs/core_abstraction/async.md
================================================
---
layout: default
title: "(Advanced) Async"
parent: "Core Abstraction"
nav_order: 5
---

# (Advanced) Async

**Async** Nodes implement `prep_async()`, `exec_async()`, `exec_fallback_async()`, and/or `post_async()`. This is useful for:

1. **prep_async()**: For *fetching/reading data (files, APIs, DB)* in an I/O-friendly way.
2. **exec_async()**: Typically used for async LLM calls.
3. **post_async()**: For *awaiting user feedback*, *coordinating across multi-agents* or any additional async steps after `exec_async()`.

**Note**: `AsyncNode` must be wrapped in `AsyncFlow`. `AsyncFlow` can also include regular (sync) nodes.

### Example

```javascript
class SummarizeThenVerify extends AsyncNode {
    async prepAsync(shared) {
        // Example: read a file asynchronously
        const docText = await readFileAsync(shared.doc_path);
        return docText;
    }

    async execAsync(prepRes) {
        // Example: async LLM call
        const summary = await callLLMAsync(`Summarize: ${prepRes}`);
        return summary;
    }

    async postAsync(shared, prepRes, execRes) {
        // Example: wait for user feedback
        const decision = await gatherUserFeedback(execRes);
        if (decision === "approve") {
            shared.summary = execRes;
            return "approve";
        }
        return "deny";
    }
}

const summarizeNode = new SummarizeThenVerify();
const finalNode = new Finalize();

// Define transitions
summarizeNode.sub("approve").rshift(finalNode);
summarizeNode.sub("deny").rshift(summarizeNode);  // retry

const flow = new AsyncFlow(summarizeNode);

async function main() {
    const shared = { doc_path: "document.txt" };
    await flow.runAsync(shared);
    console.log("Final Summary:", shared.summary);
}

main().catch(console.error);
```

================================================
File: docs/core_abstraction/batch.md
================================================
---
layout: default
title: "Batch"
parent: "Core Abstraction"
nav_order: 4
---

# Batch

**Batch** makes it easier to handle large inputs in one Node or **rerun** a Flow multiple times. Example use cases:
- **Chunk-based** processing (e.g., splitting large texts).
- **Iterative** processing over lists of input items (e.g., user queries, files, URLs).

## 1. BatchNode

A **BatchNode** extends `Node` but changes `prep()` and `exec()`:

- **`prep(shared)`**: returns an **iterable** (e.g., list, generator).
- **`exec(item)`**: called **once** per item in that iterable.
- **`post(shared, prep_res, exec_res_list)`**: after all items are processed, receives a **list** of results (`exec_res_list`) and returns an **Action**.


### Example: Summarize a Large File

```javascript
class MapSummaries extends BatchNode {
    prep(shared) {
        // Suppose we have a big file; chunk it
        const content = shared.data;
        const chunkSize = 10000;
        const chunks = [];
        for (let i = 0; i < content.length; i += chunkSize) {
            chunks.push(content.slice(i, i + chunkSize));
        }
        return chunks;
    }

    async exec(chunk) {
        const prompt = `Summarize this chunk in 10 words: ${chunk}`;
        const summary = await callLLM(prompt);
        return summary;
    }

    post(shared, prepRes, execResList) {
        const combined = execResList.join("\n");
        shared.summary = combined;
        return "default";
    }
}

const mapSummaries = new MapSummaries();
const flow = new Flow(mapSummaries);
await flow.run(shared);
```

---

## 2. BatchFlow

A **BatchFlow** runs a **Flow** multiple times, each time with different `params`. Think of it as a loop that replays the Flow for each parameter set.

### Example: Summarize Many Files

```javascript
class SummarizeAllFiles extends BatchFlow {
    prep(shared) {
        // Return a list of param dicts (one per file)
        const filenames = Object.keys(shared.data);  // e.g., ["file1.txt", "file2.txt", ...]
        return filenames.map(fn => ({ filename: fn }));
    }
}

// Suppose we have a per-file Flow (e.g., loadFile >> summarize >> reduce):
const summarizeFile = new SummarizeFile(loadFile);

// Wrap that flow into a BatchFlow:
const summarizeAllFiles = new SummarizeAllFiles(summarizeFile);
await summarizeAllFiles.run(shared);
```

### Under the Hood
1. `prep(shared)` returns a list of param dicts—e.g., `[{filename: "file1.txt"}, {filename: "file2.txt"}, ...]`.
2. The **BatchFlow** loops through each dict. For each one:
   - It merges the dict with the BatchFlow’s own `params`.
   - It calls `flow.run(shared)` using the merged result.
3. This means the sub-Flow is run **repeatedly**, once for every param dict.

---

## 3. Nested or Multi-Level Batches

You can nest a **BatchFlow** in another **BatchFlow**. For instance:
- **Outer** batch: returns a list of diretory param dicts (e.g., `{"directory": "/pathA"}`, `{"directory": "/pathB"}`, ...).
- **Inner** batch: returning a list of per-file param dicts.

At each level, **BatchFlow** merges its own param dict with the parent’s. By the time you reach the **innermost** node, the final `params` is the merged result of **all** parents in the chain. This way, a nested structure can keep track of the entire context (e.g., directory + file name) at once.

```javascript
const fs = require('fs');

class FileBatchFlow extends BatchFlow {
    prep(shared) {
        const directory = this.params.directory;
        // e.g., files = ["file1.txt", "file2.txt", ...]
        const files = fs.readdirSync(directory).filter(f => f.endsWith(".txt"));
        return files.map(f => ({ filename: f }));
    }
}

class DirectoryBatchFlow extends BatchFlow {
    prep(shared) {
        const directories = ["/path/to/dirA", "/path/to/dirB"];
        return directories.map(d => ({ directory: d }));
    }
}

// MapSummaries have params like {directory: "/path/to/dirA", filename: "file1.txt"}
const innerFlow = new FileBatchFlow(new MapSummaries());
const outerFlow = new DirectoryBatchFlow(innerFlow);
```

================================================
File: docs/core_abstraction/communication.md
================================================
---
layout: default
title: "Communication"
parent: "Core Abstraction"
nav_order: 3
---

# Communication

Nodes and Flows **communicate** in 2 ways:

1. **Shared Store (for almost all the cases)** 

   - A global data structure (often an in-mem dict) that all nodes can read ( `prep()`) and write (`post()`).  
   - Great for data results, large content, or anything multiple nodes need.
   - You shall design the data structure and populate it ahead.
     
   - > **Separation of Concerns:** Use `Shared Store` for almost all cases to separate *Data Schema* from *Compute Logic*!  This approach is both flexible and easy to manage, resulting in more maintainable code. `Params` is more a syntax sugar for [Batch](./batch.md).
     {: .best-practice }

2. **Params (only for [Batch](./batch.md))** 
   - Each node has a local, ephemeral `params` dict passed in by the **parent Flow**, used as an identifier for tasks. Parameter keys and values shall be **immutable**.
   - Good for identifiers like filenames or numeric IDs, in Batch mode.

If you know memory management, think of the **Shared Store** like a **heap** (shared by all function calls), and **Params** like a **stack** (assigned by the caller).

---

## 1. Shared Store

### Overview

A shared store is typically an in-mem dictionary, like:
```javascript
const shared = { data: {}, summary: {}, config: {...}, ... };
```

It can also contain local file handlers, DB connections, or a combination for persistence. We recommend deciding the data structure or DB schema first based on your app requirements.

### Example

```javascript
class LoadData extends Node {
    post(shared, prepRes, execRes) {
        // We write data to shared store
        shared.data = "Some text content";
        return null;
    }
}

class Summarize extends Node {
    prep(shared) {
        // We read data from shared store
        return shared.data;
    }

    async exec(prepRes) {
        // Call LLM to summarize
        const prompt = `Summarize: ${prepRes}`;
        const summary = await callLLM(prompt);
        return summary;
    }

    post(shared, prepRes, execRes) {
        // We write summary to shared store
        shared.summary = execRes;
        return "default";
    }
}

const loadData = new LoadData();
const summarize = new Summarize();
loadData.rshift(summarize);
const flow = new Flow(loadData);

const shared = {};
await flow.run(shared);
```

Here:
- `LoadData` writes to `shared.data`.
- `Summarize` reads from `shared.data`, summarizes, and writes to `shared.summary`.

---

## 2. Params

**Params** let you store *per-Node* or *per-Flow* config that doesn't need to live in the shared store. They are:
- **Immutable** during a Node's run cycle (i.e., they don't change mid-`prep->exec->post`).
- **Set** via `set_params()`.
- **Cleared** and updated each time a parent Flow calls it.

> Only set the uppermost Flow params because others will be overwritten by the parent Flow. 
> 
> If you need to set child node params, see [Batch](./batch.md).
{: .warning }

Typically, **Params** are identifiers (e.g., file name, page number). Use them to fetch the task you assigned or write to a specific part of the shared store.

### Example

```javascript
// 1) Create a Node that uses params
class SummarizeFile extends Node {
    prep(shared) {
        // Access the node's param
        const filename = this.params.filename;
        return shared.data[filename] || "";
    }

    async exec(prepRes) {
        const prompt = `Summarize: ${prepRes}`;
        return await callLLM(prompt);
    }

    post(shared, prepRes, execRes) {
        const filename = this.params.filename;
        shared.summary[filename] = execRes;
        return "default";
    }
}

// 2) Set params
const node = new SummarizeFile();

// 3) Set Node params directly (for testing)
node.setParams({ filename: "doc1.txt" });
await node.run(shared);

// 4) Create Flow
const flow = new Flow(node);

// 5) Set Flow params (overwrites node params)
flow.setParams({ filename: "doc2.txt" });
await flow.run(shared);  // The node summarizes doc2, not doc1
```

================================================
File: docs/core_abstraction/flow.md
================================================
---
layout: default
title: "Flow"
parent: "Core Abstraction"
nav_order: 2
---

# Flow

A **Flow** orchestrates a graph of Nodes. You can chain Nodes in a sequence or create branching depending on the **Actions** returned from each Node's `post()`.

## 1. Action-based Transitions

Each Node's `post()` returns an **Action** string. By default, if `post()` doesn't return anything, we treat that as `"default"`.

You define transitions with the syntax:

1. **Basic default transition**: `node_a >> node_b`
  This means if `node_a.post()` returns `"default"`, go to `node_b`. 
  (Equivalent to `node_a - "default" >> node_b`)

2. **Named action transition**: `node_a - "action_name" >> node_b`
  This means if `node_a.post()` returns `"action_name"`, go to `node_b`.

It's possible to create loops, branching, or multi-step flows.

## 2. Creating a Flow

A **Flow** begins with a **start** node. You call `new Flow(startNode)` to specify the entry point. When you call `flow.run(shared)`, it executes the start node, looks at its returned Action from `post()`, follows the transition, and continues until there's no next node.

### Example: Simple Sequence

Here's a minimal flow of two nodes in a chain:

```javascript
nodeA.rshift(nodeB);
const flow = new Flow(nodeA);
await flow.run(shared);
```

- When you run the flow, it executes `nodeA`.  
- Suppose `nodeA.post()` returns `"default"`.  
- The flow then sees `"default"` Action is linked to `nodeB` and runs `nodeB`.  
- `nodeB.post()` returns `"default"` but we didn't define `nodeB.rshift(somethingElse)`. So the flow ends there.

### Example: Branching & Looping

Here's a simple expense approval flow that demonstrates branching and looping. The `ReviewExpense` node can return three possible Actions:

- `"approved"`: expense is approved, move to payment processing
- `"needs_revision"`: expense needs changes, send back for revision 
- `"rejected"`: expense is denied, finish the process

We can wire them like this:

```javascript
// Define the flow connections
review.sub("approved").rshift(payment);        // If approved, process payment
review.sub("needs_revision").rshift(revise);   // If needs changes, go to revision
review.sub("rejected").rshift(finish);         // If rejected, finish the process

revise.rshift(review);   // After revision, go back for another review
payment.rshift(finish);  // After payment, finish the process

const flow = new Flow(review);
```

Let's see how it flows:

1. If `review.post()` returns `"approved"`, the expense moves to the `payment` node
2. If `review.post()` returns `"needs_revision"`, it goes to the `revise` node, which then loops back to `review`
3. If `review.post()` returns `"rejected"`, it moves to the `finish` node and stops

```mermaid
flowchart TD
    review[Review Expense] -->|approved| payment[Process Payment]
    review -->|needs_revision| revise[Revise Report]
    review -->|rejected| finish[Finish Process]

    revise --> review
    payment --> finish
```

### Running Individual Nodes vs. Running a Flow

- `await node.run(shared)`: Just runs that node alone (calls `prep->exec->post()`), returns an Action. 
- `await flow.run(shared)`: Executes from the start node, follows Actions to the next node, and so on until the flow can't continue.

> `await node.run(shared)` **does not** proceed to the successor.
> This is mainly for debugging or testing a single node.
> 
> Always use `await flow.run(...)` in production to ensure the full pipeline runs correctly.
{: .warning }

## 3. Nested Flows

A **Flow** can act like a Node, which enables powerful composition patterns. This means you can:

1. Use a Flow as a Node within another Flow's transitions.  
2. Combine multiple smaller Flows into a larger Flow for reuse.  
3. Node `params` will be a merging of **all** parents' `params`.

### Flow's Node Methods

A **Flow** is also a **Node**, so it will run `prep()` and `post()`. However:

- It **won't** run `exec()`, as its main logic is to orchestrate its nodes.
- `post()` always receives `null` for `exec_res` and should instead get the flow execution results from the shared store.

### Basic Flow Nesting

Here's how to connect a flow to another node:

```javascript
// Create a sub-flow
nodeA.rshift(nodeB);
const subflow = new Flow(nodeA);

// Connect it to another node
subflow.rshift(nodeC);

// Create the parent flow
const parentFlow = new Flow(subflow);
```

When `parent_flow.run()` executes:
1. It starts `subflow`
2. `subflow` runs through its nodes (`node_a->node_b`)
3. After `subflow` completes, execution continues to `node_c`

### Example: Order Processing Pipeline

Here's a practical example that breaks down order processing into nested flows:

```javascript
// Payment processing sub-flow
validatePayment.rshift(processPayment).rshift(paymentConfirmation);
const paymentFlow = new Flow(validatePayment);

// Inventory sub-flow
checkStock.rshift(reserveItems).rshift(updateInventory);
const inventoryFlow = new Flow(checkStock);

// Shipping sub-flow
createLabel.rshift(assignCarrier).rshift(schedulePickup);
const shippingFlow = new Flow(createLabel);

// Connect the flows into a main order pipeline
paymentFlow.rshift(inventoryFlow).rshift(shippingFlow);

// Create the master flow
const orderPipeline = new Flow(paymentFlow);

// Run the entire pipeline
await orderPipeline.run(sharedData);
```

This creates a clean separation of concerns while maintaining a clear execution path:

```mermaid
flowchart LR
    subgraph order_pipeline[Order Pipeline]
        subgraph paymentFlow["Payment Flow"]
            A[Validate Payment] --> B[Process Payment] --> C[Payment Confirmation]
        end

        subgraph inventoryFlow["Inventory Flow"]
            D[Check Stock] --> E[Reserve Items] --> F[Update Inventory]
        end

        subgraph shippingFlow["Shipping Flow"]
            G[Create Label] --> H[Assign Carrier] --> I[Schedule Pickup]
        end

        paymentFlow --> inventoryFlow
        inventoryFlow --> shippingFlow
    end
```

================================================
File: docs/core_abstraction/node.md
================================================
---
layout: default
title: "Node"
parent: "Core Abstraction"
nav_order: 1
---

# Node

A **Node** is the smallest building block. Each Node has 3 steps `prep->exec->post`:

<div align="center">
  <img src="https://github.com/the-pocket/.github/raw/main/assets/node.png?raw=true" width="400"/>
</div>

1. `prep(shared)`
   - **Read and preprocess data** from `shared` store. 
   - Examples: *query DB, read files, or serialize data into a string*.
   - Return `prep_res`, which is used by `exec()` and `post()`.

2. `exec(prep_res)`
   - **Execute compute logic**, with optional retries and error handling (below).
   - Examples: *(mostly) LLM calls, remote APIs, tool use*.
   - ⚠️ This shall be only for compute and **NOT** access `shared`.
   - ⚠️ If retries enabled, ensure idempotent implementation.
   - ⚠️ Defer exception handling to the Node's built-in retry mechanism.
   - Return `exec_res`, which is passed to `post()`.

3. `post(shared, prep_res, exec_res)`
   - **Postprocess and write data** back to `shared`.
   - Examples: *update DB, change states, log results*.
   - **Decide the next action** by returning a *string* (`action = "default"` if *None*).

> **Why 3 steps?** To enforce the principle of *separation of concerns*. The data storage and data processing are operated separately.
>
> All steps are *optional*. E.g., you can only implement `prep` and `post` if you just need to process data.
{: .note }

### Fault Tolerance & Retries

You can **retry** `exec()` if it raises an exception via two parameters when define the Node:

- `max_retries` (int): Max times to run `exec()`. The default is `1` (**no** retry).
- `wait` (int): The time to wait (in **seconds**) before next retry. By default, `wait=0` (no waiting). 
`wait` is helpful when you encounter rate-limits or quota errors from your LLM provider and need to back off.

```javascript
const myNode = new SummarizeFile(3, 10); // maxRetries=3, wait=10
```

When an exception occurs in `exec()`, the Node automatically retries until:

- It either succeeds, or
- The Node has retried `maxRetries - 1` times already and fails on the last attempt.

You can get the current retry times (0-based) from `this.curRetry`.

```javascript
class RetryNode extends Node {
    async exec(prepRes) {
        console.log(`Retry ${this.curRetry} times`);
        throw new Error("Failed");
    }
}
```

### Graceful Fallback

To **gracefully handle** the exception (after all retries) rather than raising it, override:

```javascript
async execFallback(prepRes, exc) {
    throw exc;
}
```

By default, it just re-raises exception. But you can return a fallback result instead, which becomes the `execRes` passed to `post()`.

### Example: Summarize file

```javascript
class SummarizeFile extends Node {
    prep(shared) {
        return shared.data;
    }

    async exec(prepRes) {
        if (!prepRes) {
            return "Empty file content";
        }
        const prompt = `Summarize this text in 10 words: ${prepRes}`;
        const summary = await callLLM(prompt);  // might fail
        return summary;
    }

    async execFallback(prepRes, exc) {
        // Provide a simple fallback instead of crashing
        return "There was an error processing your request.";
    }

    post(shared, prepRes, execRes) {
        shared.summary = execRes;
        // Return "default" by not returning
    }
}

const summarizeNode = new SummarizeFile(3); // maxRetries=3

// node.run() calls prep->exec->post
// If exec() fails, it retries up to 3 times before calling execFallback()
const actionResult = await summarizeNode.run(shared);

console.log("Action returned:", actionResult);  // "default"
console.log("Summary stored:", shared.summary);
```

================================================
File: docs/core_abstraction/parallel.md
================================================
---
layout: default
title: "(Advanced) Parallel"
parent: "Core Abstraction"
nav_order: 6
---

# (Advanced) Parallel

**Parallel** Nodes and Flows let you run multiple **Async** Nodes and Flows  **concurrently**—for example, summarizing multiple texts at once. This can improve performance by overlapping I/O and compute. 

> Because of Python’s GIL, parallel nodes and flows can’t truly parallelize CPU-bound tasks (e.g., heavy numerical computations). However, they excel at overlapping I/O-bound work—like LLM calls, database queries, API requests, or file I/O.
{: .warning }

> - **Ensure Tasks Are Independent**: If each item depends on the output of a previous item, **do not** parallelize.
> 
> - **Beware of Rate Limits**: Parallel calls can **quickly** trigger rate limits on LLM services. You may need a **throttling** mechanism (e.g., semaphores or sleep intervals).
> 
> - **Consider Single-Node Batch APIs**: Some LLMs offer a **batch inference** API where you can send multiple prompts in a single call. This is more complex to implement but can be more efficient than launching many parallel requests and mitigates rate limits.
{: .best-practice }

## AsyncParallelBatchNode

Like **AsyncBatchNode**, but run `exec_async()` in **parallel**:

```javascript
class ParallelSummaries extends AsyncParallelBatchNode {
    async prepAsync(shared) {
        // e.g., multiple texts
        return shared.texts;
    }

    async execAsync(text) {
        const prompt = `Summarize: ${text}`;
        return await callLLMAsync(prompt);
    }

    async postAsync(shared, prepRes, execResList) {
        shared.summary = execResList.join("\n\n");
        return "default";
    }
}

const node = new ParallelSummaries();
const flow = new AsyncFlow(node);
```

## AsyncParallelBatchFlow

Parallel version of **BatchFlow**. Each iteration of the sub-flow runs **concurrently** using different parameters:

```javascript
class SummarizeMultipleFiles extends AsyncParallelBatchFlow {
    async prepAsync(shared) {
        return shared.files.map(f => ({ filename: f }));
    }
}

const subFlow = new AsyncFlow(new LoadAndSummarizeFile());
const parallelFlow = new SummarizeMultipleFiles(subFlow);
await parallelFlow.runAsync(shared);
```

================================================
File: docs/design_pattern/agent.md
================================================
---
layout: default
title: "Agent"
parent: "Design Pattern"
nav_order: 1
---

# Agent

Agent is a powerful design pattern in which nodes can take dynamic actions based on the context.

<div align="center">
  <img src="https://github.com/the-pocket/.github/raw/main/assets/agent.png?raw=true" width="350"/>
</div>

## Implement Agent with Graph

1. **Context and Action:** Implement nodes that supply context and perform actions.  
2. **Branching:** Use branching to connect each action node to an agent node. Use action to allow the agent to direct the [flow](../core_abstraction/flow.md) between nodes—and potentially loop back for multi-step.
3. **Agent Node:** Provide a prompt to decide action—for example:

```javascript
`
### CONTEXT
Task: ${taskDescription}
Previous Actions: ${previousActions}
Current State: ${currentState}

### ACTION SPACE
[1] search
  Description: Use web search to get results
  Parameters:
    - query (string): What to search for

[2] answer
  Description: Conclude based on the results
  Parameters:
    - result (string): Final answer to provide

### NEXT ACTION
Decide the next action based on the current context and available action space.
Return your response in the following format:

\`\`\`yaml
thinking: |
    <your step-by-step reasoning process>
action: <action_name>
parameters:
    <parameter_name>: <parameter_value>
\`\`\``
```

The core of building **high-performance** and **reliable** agents boils down to:

1. **Context Management:** Provide *relevant, minimal context.* For example, rather than including an entire chat history, retrieve the most relevant via [RAG](./rag.md). Even with larger context windows, LLMs still fall victim to ["lost in the middle"](https://arxiv.org/abs/2307.03172), overlooking mid-prompt content.

2. **Action Space:** Provide *a well-structured and unambiguous* set of actions—avoiding overlap like separate `readDatabases` or  `readCsvs`. Instead, import CSVs into the database.

## Example Good Action Design

- **Incremental:** Feed content in manageable chunks (500 lines or 1 page) instead of all at once.

- **Overview-zoom-in:** First provide high-level structure (table of contents, summary), then allow drilling into details (raw texts).

- **Parameterized/Programmable:** Instead of fixed actions, enable parameterized (columns to select) or programmable (SQL queries) actions, for example, to read CSV files.

- **Backtracking:** Let the agent undo the last step instead of restarting entirely, preserving progress when encountering errors or dead ends.

## Example: Search Agent

This agent:
1. Decides whether to search or answer
2. If searches, loops back to decide if more search needed
3. Answers when enough context gathered

```javascript
const yaml = require('js-yaml');

class DecideAction extends Node {
    prep(shared) {
        const context = shared.context || "No previous search";
        const query = shared.query;
        return { query, context };
    }
    
    async exec(inputs) {
        const { query, context } = inputs;
        const prompt = `
Given input: ${query}
Previous search results: ${context}
Should I: 1) Search web for more info 2) Answer with current knowledge
Output in yaml:
\`\`\`yaml
action: search/answer
reason: why this action
search_term: search phrase if action is search
\`\`\``;
        
        const resp = await callLLM(prompt);
        const yamlStr = resp.split("```yaml")[1].split("```")[0].trim();
        const result = yaml.load(yamlStr);
        
        if (!result || typeof result !== 'object') {
            throw new Error("Invalid YAML response");
        }
        if (!result.action || !result.reason) {
            throw new Error("Missing required fields");
        }
        if (!["search", "answer"].includes(result.action)) {
            throw new Error("Invalid action");
        }
        if (result.action === "search" && !result.search_term) {
            throw new Error("Missing search_term for search action");
        }
        
        return result;
    }

    post(shared, prepRes, execRes) {
        if (execRes.action === "search") {
            shared.search_term = execRes.search_term;
        }
        return execRes.action;
    }
}

class SearchWeb extends Node {
    prep(shared) {
        return shared.search_term;
    }
        
    async exec(searchTerm) {
        return await searchWeb(searchTerm);
    }
    
    post(shared, prepRes, execRes) {
        const prevSearches = shared.context || [];
        shared.context = prevSearches.concat([
            { term: shared.search_term, result: execRes }
        ]);
        return "decide";
    }
}
        
class DirectAnswer extends Node {
    prep(shared) {
        return { query: shared.query, context: shared.context || "" };
    }
        
    async exec(inputs) {
        const { query, context } = inputs;
        return await callLLM(`Context: ${context}\nAnswer: ${query}`);
    }

    post(shared, prepRes, execRes) {
        console.log(`Answer: ${execRes}`);
        shared.answer = execRes;
    }
}

// Connect nodes
const decide = new DecideAction();
const search = new SearchWeb();
const answer = new DirectAnswer();

decide.sub("search").rshift(search);
decide.sub("answer").rshift(answer);
search.sub("decide").rshift(decide);  // Loop back

const flow = new Flow(decide);
await flow.run({ query: "Who won the Nobel Prize in Physics 2024?" });
```

================================================
File: docs/design_pattern/mapreduce.md
================================================
---
layout: default
title: "Map Reduce"
parent: "Design Pattern"
nav_order: 4
---

# Map Reduce

MapReduce is a design pattern suitable when you have either:
- Large input data (e.g., multiple files to process), or
- Large output data (e.g., multiple forms to fill)

and there is a logical way to break the task into smaller, ideally independent parts. 

<div align="center">
  <img src="https://github.com/the-pocket/.github/raw/main/assets/mapreduce.png?raw=true" width="400"/>
</div>

You first break down the task using [BatchNode](../core_abstraction/batch.md) in the map phase, followed by aggregation in the reduce phase.

### Example: Document Summarization

```javascript
class SummarizeAllFiles extends BatchNode {
    prep(shared) {
        const filesDict = shared.files;  // e.g. 10 files
        return Object.entries(filesDict);  // [["file1.txt", "aaa..."], ["file2.txt", "bbb..."], ...]
    }

    async exec(oneFile) {
        const [filename, fileContent] = oneFile;
        const summaryText = await callLLM(`Summarize the following file:\n${fileContent}`);
        return [filename, summaryText];
    }

    post(shared, prepRes, execResList) {
        shared.file_summaries = Object.fromEntries(execResList);
    }
}

class CombineSummaries extends Node {
    prep(shared) {
        return shared.file_summaries;
    }

    async exec(fileSummaries) {
        // format as: "File1: summary\nFile2: summary...\n"
        const textList = [];
        for (const [fname, summ] of Object.entries(fileSummaries)) {
            textList.push(`${fname} summary:\n${summ}\n`);
        }
        const bigText = textList.join("\n---\n");

        return await callLLM(`Combine these file summaries into one final summary:\n${bigText}`);
    }

    post(shared, prepRes, finalSummary) {
        shared.all_files_summary = finalSummary;
    }
}

const batchNode = new SummarizeAllFiles();
const combineNode = new CombineSummaries();
batchNode.rshift(combineNode);

const flow = new Flow(batchNode);

const shared = {
    files: {
        "file1.txt": "Alice was beginning to get very tired of sitting by her sister...",
        "file2.txt": "Some other interesting text ...",
        // ...
    }
};
await flow.run(shared);
console.log("Individual Summaries:", shared.file_summaries);
console.log("\nFinal Summary:\n", shared.all_files_summary);
```

================================================
File: docs/design_pattern/rag.md
================================================
---
layout: default
title: "RAG"
parent: "Design Pattern"
nav_order: 3
---

# RAG (Retrieval Augmented Generation)

For certain LLM tasks like answering questions, providing relevant context is essential. One common architecture is a **two-stage** RAG pipeline:

<div align="center">
  <img src="https://github.com/the-pocket/.github/raw/main/assets/rag.png?raw=true" width="400"/>
</div>

1. **Offline stage**: Preprocess and index documents ("building the index").
2. **Online stage**: Given a question, generate answers by retrieving the most relevant context.

---
## Stage 1: Offline Indexing

We create three Nodes:
1. `ChunkDocs` – [chunks](../utility_function/chunking.md) raw text.
2. `EmbedDocs` – [embeds](../utility_function/embedding.md) each chunk.
3. `StoreIndex` – stores embeddings into a [vector database](../utility_function/vector.md).

```javascript
const fs = require('fs');

class ChunkDocs extends BatchNode {
    prep(shared) {
        // A list of file paths in shared.files. We process each file.
        return shared.files;
    }

    exec(filepath) {
        // read file content. In real usage, do error handling.
        const text = fs.readFileSync(filepath, 'utf-8');
        // chunk by 100 chars each
        const chunks = [];
        const size = 100;
        for (let i = 0; i < text.length; i += size) {
            chunks.push(text.slice(i, i + size));
        }
        return chunks;
    }
    
    post(shared, prepRes, execResList) {
        // execResList is a list of chunk-lists, one per file.
        // flatten them all into a single list of chunks.
        const allChunks = [];
        for (const chunkList of execResList) {
            allChunks.push(...chunkList);
        }
        shared.all_chunks = allChunks;
    }
}

class EmbedDocs extends BatchNode {
    prep(shared) {
        return shared.all_chunks;
    }

    async exec(chunk) {
        return await getEmbedding(chunk);
    }

    post(shared, prepRes, execResList) {
        // Store the list of embeddings.
        shared.all_embeds = execResList;
        console.log(`Total embeddings: ${execResList.length}`);
    }
}

class StoreIndex extends Node {
    prep(shared) {
        // We'll read all embeds from shared.
        return shared.all_embeds;
    }

    async exec(allEmbeds) {
        // Create a vector index (faiss or other DB in real usage).
        const index = await createIndex(allEmbeds);
        return index;
    }

    post(shared, prepRes, index) {
        shared.index = index;
    }
}

// Wire them in sequence
const chunkNode = new ChunkDocs();
const embedNode = new EmbedDocs();
const storeNode = new StoreIndex();

chunkNode.rshift(embedNode).rshift(storeNode);

const offlineFlow = new Flow(chunkNode);
```

Usage example:

```javascript
const shared = {
    files: ["doc1.txt", "doc2.txt"]  // any text files
};
await offlineFlow.run(shared);
```

---
## Stage 2: Online Query & Answer

We have 3 nodes:
1. `EmbedQuery` – embeds the user’s question.
2. `RetrieveDocs` – retrieves top chunk from the index.
3. `GenerateAnswer` – calls the LLM with the question + chunk to produce the final answer.

```javascript
class EmbedQuery extends Node {
    prep(shared) {
        return shared.question;
    }

    async exec(question) {
        return await getEmbedding(question);
    }

    post(shared, prepRes, qEmb) {
        shared.q_emb = qEmb;
    }
}

class RetrieveDocs extends Node {
    prep(shared) {
        // We'll need the query embedding, plus the offline index/chunks
        return { qEmb: shared.q_emb, index: shared.index, chunks: shared.all_chunks };
    }

    exec(inputs) {
        const { qEmb, index, chunks } = inputs;
        const [I, D] = searchIndex(index, qEmb, 1); // top_k=1
        const bestId = I[0][0];
        const relevantChunk = chunks[bestId];
        return relevantChunk;
    }

    post(shared, prepRes, relevantChunk) {
        shared.retrieved_chunk = relevantChunk;
        console.log("Retrieved chunk:", relevantChunk.slice(0, 60), "...");
    }
}

class GenerateAnswer extends Node {
    prep(shared) {
        return { question: shared.question, chunk: shared.retrieved_chunk };
    }

    async exec(inputs) {
        const { question, chunk } = inputs;
        const prompt = `Question: ${question}\nContext: ${chunk}\nAnswer:`;
        return await callLLM(prompt);
    }

    post(shared, prepRes, answer) {
        shared.answer = answer;
        console.log("Answer:", answer);
    }
}

const embedQNode = new EmbedQuery();
const retrieveNode = new RetrieveDocs();
const generateNode = new GenerateAnswer();

embedQNode.rshift(retrieveNode).rshift(generateNode);
const onlineFlow = new Flow(embedQNode);
```

Usage example:

```javascript
// Suppose we already ran offlineFlow and have:
// shared.all_chunks, shared.index, etc.
shared.question = "Why do people like cats?";

await onlineFlow.run(shared);
// final answer in shared.answer
```

================================================
File: docs/design_pattern/structure.md
================================================
---
layout: default
title: "Structured Output"
parent: "Design Pattern"
nav_order: 5
---

# Structured Output

In many use cases, you may want the LLM to output a specific structure, such as a list or a dictionary with predefined keys.

There are several approaches to achieve a structured output:
- **Prompting** the LLM to strictly return a defined structure.
- Using LLMs that natively support **schema enforcement**.
- **Post-processing** the LLM's response to extract structured content.

In practice, **Prompting** is simple and reliable for modern LLMs.

### Example Use Cases

- Extracting Key Information 

```yaml
product:
  name: Widget Pro
  price: 199.99
  description: |
    A high-quality widget designed for professionals.
    Recommended for advanced users.
```

- Summarizing Documents into Bullet Points

```yaml
summary:
  - This product is easy to use.
  - It is cost-effective.
  - Suitable for all skill levels.
```

- Generating Configuration Files

```yaml
server:
  host: 127.0.0.1
  port: 8080
  ssl: true
```

## Prompt Engineering

When prompting the LLM to produce **structured** output:
1. **Wrap** the structure in code fences (e.g., `yaml`).
2. **Validate** that all required fields exist (and let `Node` handles retry).

### Example Text Summarization

```javascript
const yaml = require('js-yaml');

class SummarizeNode extends Node {
    async exec(prepRes) {
        // Suppose `prepRes` is the text to summarize.
        const prompt = `
Please summarize the following text as YAML, with exactly 3 bullet points

${prepRes}

Now, output:
\`\`\`yaml
summary:
  - bullet 1
  - bullet 2
  - bullet 3
\`\`\``;
        
        const response = await callLLM(prompt);
        const yamlStr = response.split("```yaml")[1].split("```")[0].trim();

        const structuredResult = yaml.load(yamlStr);

        if (!structuredResult.summary) {
            throw new Error("Missing summary field");
        }
        if (!Array.isArray(structuredResult.summary)) {
            throw new Error("Summary must be an array");
        }

        return structuredResult;
    }
}
```

> Besides using `assert` statements, another popular way to validate schemas is [Pydantic](https://github.com/pydantic/pydantic)
{: .note }

### Why YAML instead of JSON?

Current LLMs struggle with escaping. YAML is easier with strings since they don't always need quotes.

**In JSON**  

```json
{
  "dialogue": "Alice said: \"Hello Bob.\\nHow are you?\\nI am good.\""
}
```

- Every double quote inside the string must be escaped with `\"`.
- Each newline in the dialogue must be represented as `\n`.

**In YAML**  

```yaml
dialogue: |
  Alice said: "Hello Bob.
  How are you?
  I am good."
```

- No need to escape interior quotes—just place the entire text under a block literal (`|`).
- Newlines are naturally preserved without needing `\n`.

================================================
File: docs/design_pattern/workflow.md
================================================
---
layout: default
title: "Workflow"
parent: "Design Pattern"
nav_order: 2
---

# Workflow

Many real-world tasks are too complex for one LLM call. The solution is to **Task Decomposition**: decompose them into a [chain](../core_abstraction/flow.md) of multiple Nodes.

<div align="center">
  <img src="https://github.com/the-pocket/.github/raw/main/assets/workflow.png?raw=true" width="400"/>
</div>

> - You don't want to make each task **too coarse**, because it may be *too complex for one LLM call*.
> - You don't want to make each task **too granular**, because then *the LLM call doesn't have enough context* and results are *not consistent across nodes*.
> 
> You usually need multiple *iterations* to find the *sweet spot*. If the task has too many *edge cases*, consider using [Agents](./agent.md).
{: .best-practice }

### Example: Article Writing

```javascript
class GenerateOutline extends Node {
    prep(shared) { return shared.topic; }
    async exec(topic) { return await callLLM(`Create a detailed outline for an article about ${topic}`); }
    post(shared, prepRes, execRes) { shared.outline = execRes; }
}

class WriteSection extends Node {
    prep(shared) { return shared.outline; }
    async exec(outline) { return await callLLM(`Write content based on this outline: ${outline}`); }
    post(shared, prepRes, execRes) { shared.draft = execRes; }
}

class ReviewAndRefine extends Node {
    prep(shared) { return shared.draft; }
    async exec(draft) { return await callLLM(`Review and improve this draft: ${draft}`); }
    post(shared, prepRes, execRes) { shared.final_article = execRes; }
}

// Connect nodes
const outline = new GenerateOutline();
const write = new WriteSection();
const review = new ReviewAndRefine();

outline.rshift(write).rshift(review);

// Create and run flow
const writingFlow = new Flow(outline);
const shared = { topic: "AI Safety" };
await writingFlow.run(shared);
```

For *dynamic cases*, consider using [Agents](./agent.md).

================================================
File: docs/utility_function/llm.md
================================================
---
layout: default
title: "LLM Wrapper"
parent: "Utility Function"
nav_order: 1
---

# LLM Wrappers

Check out libraries like [litellm](https://github.com/BerriAI/litellm). 
Here, we provide some minimal example implementations:

1. OpenAI
    ```javascript
    async function callLLM(prompt) {
        const { OpenAI } = require('openai');
        const client = new OpenAI({
            apiKey: process.env.OPENAI_API_KEY || "YOUR_API_KEY_HERE"
        });
        
        const response = await client.chat.completions.create({
            model: "gpt-4o",
            messages: [{ role: "user", content: prompt }]
        });
        
        return response.choices[0].message.content;
    }

    // Example usage
    callLLM("How are you?");
    ```
    > Store the API key in an environment variable like OPENAI_API_KEY for security.
    {: .best-practice }

2. Claude (Anthropic)
    ```javascript
    async function callLLM(prompt) {
        const { Anthropic } = require('@anthropic-ai/sdk');
        const client = new Anthropic({
            apiKey: process.env.ANTHROPIC_API_KEY || "YOUR_API_KEY_HERE"
        });
        
        const response = await client.messages.create({
            model: "claude-3-5-sonnet-20241022",
            max_tokens: 1000,
            messages: [{ role: "user", content: prompt }]
        });
        
        return response.content[0].text;
    }
    ```

3. Google (Generative AI Studio / PaLM API)
    ```javascript
    async function callLLM(prompt) {
        const { GoogleGenerativeAI } = require('@google/generative-ai');
        const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || 'YOUR_API_KEY');
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-pro' });
        
        const result = await model.generateContent(prompt);
        return result.response.text();
    }
    ```

4. Azure (Azure OpenAI)
    ```javascript
    async function callLLM(prompt) {
        const { AzureOpenAI } = require('openai');
        const client = new AzureOpenAI({
            azureEndpoint: process.env.AZURE_ENDPOINT || "https://<YOUR_RESOURCE_NAME>.openai.azure.com/",
            apiKey: process.env.AZURE_API_KEY || "YOUR_API_KEY_HERE",
            apiVersion: "2023-05-15"
        });
        
        const response = await client.chat.completions.create({
            model: process.env.AZURE_DEPLOYMENT_NAME || "<YOUR_DEPLOYMENT_NAME>",
            messages: [{ role: "user", content: prompt }]
        });
        
        return response.choices[0].message.content;
    }
    ```

5. Ollama (Local LLM)
    ```javascript
    async function callLLM(prompt) {
        const axios = require('axios');
        const response = await axios.post('http://localhost:11434/api/chat', {
            model: "llama2",
            messages: [{ role: "user", content: prompt }],
            stream: false
        });
        
        return response.data.message.content;
    }
    ```

## Improvements
Feel free to enhance your `callLLM` function as needed. Here are examples:

- Handle chat history:

```javascript
async function callLLM(messages) {
    const { OpenAI } = require('openai');
    const client = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY || "YOUR_API_KEY_HERE"
    });
    
    const response = await client.chat.completions.create({
        model: "gpt-4o",
        messages: messages
    });
    
    return response.choices[0].message.content;
}
```

- Add in-memory caching 

```javascript
const NodeCache = require('node-cache');
const cache = new NodeCache({ stdTTL: 600 }); // 10 minutes

async function callLLM(prompt, useCache = true) {
    if (useCache) {
        const cached = cache.get(prompt);
        if (cached) return cached;
    }
    
    // Your implementation here
    const response = await yourLLMCall(prompt);
    
    if (useCache) {
        cache.set(prompt, response);
    }
    
    return response;
}
```

> ⚠️ Caching conflicts with Node retries, as retries yield the same result.
>
> To address this, you could use cached results only if not retried.
{: .warning }

```javascript
async function callLLM(prompt, useCache = true) {
    if (useCache) {
        const cached = cache.get(prompt);
        if (cached) return cached;
    }
    
    const response = await yourLLMCall(prompt);
    
    if (useCache) {
        cache.set(prompt, response);
    }
    
    return response;
}

class SummarizeNode extends Node {
    async exec(text) {
        return await callLLM(`Summarize: ${text}`, this.curRetry === 0);
    }
}
```

- Enable logging:

```javascript
async function callLLM(prompt) {
    console.log(`Prompt: ${prompt}`);
    const response = await yourLLMCall(prompt); // Your implementation here
    console.log(`Response: ${response}`);
    return response;
}
```